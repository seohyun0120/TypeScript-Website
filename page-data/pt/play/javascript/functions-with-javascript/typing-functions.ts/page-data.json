{"componentChunkName":"component---src-templates-play-example-tsx","path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts","result":{"data":{"allSitePage":{"nodes":[{"path":"/dev-404-page/"},{"path":"/docs/handbook/nightly-builds.html"},{"path":"/pt/docs/handbook/nightly-builds.html"},{"path":"/docs/handbook/declaration-files/consumption.html"},{"path":"/docs/handbook/declaration-files/by-example.html"},{"path":"/docs/handbook/declaration-files/deep-dive.html"},{"path":"/docs/handbook/declaration-files/do-s-and-don-ts.html"},{"path":"/docs/handbook/declaration-files/introduction.html"},{"path":"/docs/handbook/declaration-files/publishing.html"},{"path":"/docs/handbook/declaration-files/library-structures.html"},{"path":"/docs/handbook/declaration-files/templates.html"},{"path":"/docs/handbook/typescript-in-5-minutes.html"},{"path":"/docs/handbook/typescript-in-5-minutes-func.html"},{"path":"/docs/handbook/typescript-in-5-minutes-oop.html"},{"path":"/docs/handbook/typescript-from-scratch.html"},{"path":"/docs/handbook/basic-types.html"},{"path":"/docs/handbook/enums.html"},{"path":"/docs/handbook/classes.html"},{"path":"/docs/handbook/generics.html"},{"path":"/docs/handbook/functions.html"},{"path":"/docs/handbook/literal-types.html"},{"path":"/docs/handbook/intro.html"},{"path":"/docs/handbook/interfaces.html"},{"path":"/docs/handbook/unions-and-intersections.html"},{"path":"/docs/handbook/2/basic-types.html"},{"path":"/docs/handbook/2/everyday-types.html"},{"path":"/docs/handbook/2/classes.html"},{"path":"/docs/handbook/2/modules.html"},{"path":"/docs/handbook/2/functions.html"},{"path":"/docs/handbook/2/narrowing.html"},{"path":"/docs/handbook/2/type-declarations.html"},{"path":"/docs/handbook/2/objects.html"},{"path":"/docs/handbook/2/types-from-extraction.html"},{"path":"/docs/handbook/2/understanding-errors.html"},{"path":"/docs/handbook/2/types-from-transformation.html"},{"path":"/docs/handbook/intro-to-js-ts.html"},{"path":"/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/docs/handbook/type-checking-javascript-files.html"},{"path":"/docs/handbook/jsdoc-supported-types.html"},{"path":"/docs/handbook/compiler-options-in-msbuild.html"},{"path":"/docs/handbook/configuring-watch.html"},{"path":"/docs/handbook/compiler-options.html"},{"path":"/docs/handbook/integrating-with-build-tools.html"},{"path":"/docs/handbook/tsconfig-json.html"},{"path":"/docs/handbook/project-references.html"},{"path":"/docs/handbook/declaration-merging.html"},{"path":"/docs/handbook/decorators.html"},{"path":"/docs/handbook/advanced-types.html"},{"path":"/docs/handbook/iterators-and-generators.html"},{"path":"/docs/handbook/mixins.html"},{"path":"/docs/handbook/jsx.html"},{"path":"/docs/handbook/module-resolution.html"},{"path":"/docs/handbook/modules.html"},{"path":"/docs/handbook/namespaces-and-modules.html"},{"path":"/docs/handbook/symbols.html"},{"path":"/docs/handbook/namespaces.html"},{"path":"/docs/handbook/triple-slash-directives.html"},{"path":"/docs/handbook/type-compatibility.html"},{"path":"/docs/handbook/type-inference.html"},{"path":"/docs/handbook/utility-types.html"},{"path":"/docs/handbook/variable-declarations.html"},{"path":"/docs/handbook/release-notes/typescript-1-1.html"},{"path":"/docs/handbook/release-notes/typescript-1-3.html"},{"path":"/docs/handbook/release-notes/typescript-1-4.html"},{"path":"/docs/handbook/release-notes/typescript-1-5.html"},{"path":"/docs/handbook/release-notes/typescript-1-6.html"},{"path":"/docs/handbook/release-notes/typescript-1-7.html"},{"path":"/docs/handbook/release-notes/typescript-1-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-1.html"},{"path":"/docs/handbook/release-notes/typescript-2-0.html"},{"path":"/docs/handbook/release-notes/typescript-2-2.html"},{"path":"/docs/handbook/release-notes/typescript-2-3.html"},{"path":"/docs/handbook/release-notes/typescript-2-4.html"},{"path":"/docs/handbook/release-notes/typescript-2-5.html"},{"path":"/docs/handbook/release-notes/typescript-2-6.html"},{"path":"/docs/handbook/release-notes/typescript-2-7.html"},{"path":"/docs/handbook/release-notes/typescript-2-8.html"},{"path":"/docs/handbook/release-notes/typescript-2-9.html"},{"path":"/docs/handbook/release-notes/typescript-3-1.html"},{"path":"/docs/handbook/release-notes/typescript-3-0.html"},{"path":"/docs/handbook/release-notes/typescript-3-3.html"},{"path":"/docs/handbook/release-notes/typescript-3-2.html"},{"path":"/docs/handbook/release-notes/typescript-3-5.html"},{"path":"/docs/handbook/release-notes/typescript-3-4.html"},{"path":"/docs/handbook/release-notes/typescript-3-6.html"},{"path":"/docs/handbook/release-notes/typescript-3-7.html"},{"path":"/docs/handbook/release-notes/typescript-3-8.html"},{"path":"/docs/handbook/release-notes/typescript-3-9.html"},{"path":"/docs/handbook/asp-net-core.html"},{"path":"/docs/handbook/angular.html"},{"path":"/docs/handbook/release-notes/typescript-4-0.html"},{"path":"/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/dom-manipulation.html"},{"path":"/docs/handbook/gulp.html"},{"path":"/docs/handbook/react.html"},{"path":"/docs/handbook/migrating-from-javascript.html"},{"path":"/ko/docs/handbook/babel-with-typescript.html"},{"path":"/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/ko/docs/handbook/react.html"},{"path":"/ko/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/pt/docs/handbook/intro-to-js-ts.html"},{"path":"/pt/docs/handbook/react.html"},{"path":"/pt/docs/handbook/typescript-tooling-in-5-minutes.html"},{"path":"/pt/docs/handbook/declaration-files/dts-from-js.html"},{"path":"/vo/docs/handbook/basic-types.html"},{"path":"/docs/handbook/declaration-files/templates/module-class-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-function-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/module-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-plugin-d-ts.html"},{"path":"/docs/handbook/declaration-files/templates/global-modifying-module-d-ts.html"},{"path":"/docs/handbook/release-notes/overview.html"},{"path":"/tsconfig"},{"path":"/es/tsconfig"},{"path":"/id/tsconfig"},{"path":"/ja/tsconfig"},{"path":"/ko/tsconfig"},{"path":"/pt/tsconfig"},{"path":"/vo/tsconfig"},{"path":"/play"},{"path":"/es/play"},{"path":"/fa/play"},{"path":"/ja/play"},{"path":"/pt/play"},{"path":"/vo/play"},{"path":"/zh/play"},{"path":"/play/3-7/fixits/big-number-literals.ts"},{"path":"/play/3-7/fixits/const-to-let.ts"},{"path":"/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/play/3-7/types-and-code-flow/assertion-functions.ts"},{"path":"/play/3-7/types-and-code-flow/recursive-type-references.ts"},{"path":"/play/3-7/types-and-code-flow/uncalled-function-checks.ts"},{"path":"/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/play/3-8/jsdoc-improvements/accessibility-modifiers.js"},{"path":"/play/3-8/syntax-and-messaging/export-modules-from.ts"},{"path":"/play/3-8/syntax-and-messaging/private-class-fields.ts"},{"path":"/play/4-0/new-checks/class-constructor-code-flow.ts"},{"path":"/play/4-0/new-js-features/jsdoc-deprecated.ts"},{"path":"/play/4-0/new-js-features/logical-operators-and-assignment.ts"},{"path":"/play/4-0/new-js-features/nullish-coalescing.ts"},{"path":"/play/4-0/new-ts-features/named-tuples.ts"},{"path":"/play/4-0/new-ts-features/unknown-in-catch.ts"},{"path":"/play/4-0/new-ts-features/variadic-tuples.ts"},{"path":"/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/play/javascript/external-apis/typescript-with-node.js"},{"path":"/play/javascript/external-apis/typescript-with-web.js"},{"path":"/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/play/javascript/helping-with-javascript/errors.ts"},{"path":"/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/play/javascript/javascript-essentials/functions.ts"},{"path":"/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/play/javascript/modern-javascript/async-await.ts"},{"path":"/play/javascript/modern-javascript/immutability.ts"},{"path":"/play/javascript/modern-javascript/import-export.ts"},{"path":"/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/play/javascript/working-with-classes/classes-101.ts"},{"path":"/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/play/javascript/working-with-classes/mixins.ts"},{"path":"/play/javascript/working-with-classes/this.ts"},{"path":"/play/playground/config/javascript-playgrounds.js"},{"path":"/play/playground/config/new-compiler-defaults.ts"},{"path":"/play/playground/language/automatic-type-acquisition.ts"},{"path":"/play/playground/language/fixits.ts"},{"path":"/play/playground/tooling/mobile-support.ts"},{"path":"/play/playground/tooling/sharable-urls.ts"},{"path":"/play/playground/tooling/typescript-versions.ts"},{"path":"/play/typescript/language/soundness.ts"},{"path":"/play/typescript/language/structural-typing.ts"},{"path":"/play/typescript/language/type-guards.ts"},{"path":"/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/play/typescript/language-extensions/enums.ts"},{"path":"/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/play/typescript/meta-types/conditional-types.ts"},{"path":"/play/typescript/meta-types/discriminate-types.ts"},{"path":"/play/typescript/meta-types/indexed-types.ts"},{"path":"/play/typescript/meta-types/mapped-types.ts"},{"path":"/play/typescript/primitives/any.ts"},{"path":"/play/typescript/primitives/literals.ts"},{"path":"/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/play/typescript/primitives/unknown-and-never.ts"},{"path":"/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/play/typescript/type-primitives/nullable-types.ts"},{"path":"/play/typescript/type-primitives/tuples.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/es/play/javascript/external-apis/typescript-with-node.js"},{"path":"/es/play/javascript/external-apis/typescript-with-web.js"},{"path":"/es/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/es/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/es/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/es/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/es/play/typescript/language/soundness.ts"},{"path":"/es/play/typescript/language/structural-typing.ts"},{"path":"/es/play/typescript/language/type-guards.ts"},{"path":"/es/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/es/play/typescript/meta-types/conditional-types.ts"},{"path":"/es/play/typescript/meta-types/discriminate-types.ts"},{"path":"/es/play/typescript/meta-types/indexed-types.ts"},{"path":"/es/play/typescript/meta-types/mapped-types.ts"},{"path":"/es/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/es/play/typescript/type-primitives/nullable-types.ts"},{"path":"/es/play/typescript/type-primitives/tuples.ts"},{"path":"/fa/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/ja/play/3-7/fixits/big-number-literals.ts"},{"path":"/ja/play/3-7/fixits/const-to-let.ts"},{"path":"/ja/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/es/play/typescript/primitives/any.ts"},{"path":"/es/play/typescript/primitives/literals.ts"},{"path":"/es/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/es/play/typescript/primitives/unknown-and-never.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/nullish-coalescing.ts"},{"path":"/ja/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/ja/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/ja/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/ja/play/typescript/language-extensions/enums.ts"},{"path":"/ja/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/ja/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/ja/play/typescript/primitives/any.ts"},{"path":"/ja/play/typescript/primitives/literals.ts"},{"path":"/ja/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/ja/play/typescript/primitives/unknown-and-never.ts"},{"path":"/ja/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/ja/play/typescript/type-primitives/nullable-types.ts"},{"path":"/ja/play/typescript/type-primitives/tuples.ts"},{"path":"/pt/play/3-7/fixits/big-number-literals.ts"},{"path":"/pt/play/3-7/fixits/const-to-let.ts"},{"path":"/pt/play/3-7/fixits/infer-from-usage-changes.ts"},{"path":"/pt/play/3-7/syntax-and-messaging/flattened-error-reporting.ts"},{"path":"/pt/play/3-7/syntax-and-messaging/optional-chaining.ts"},{"path":"/pt/play/3-7/types-and-code-flow/assertion-functions.ts"},{"path":"/pt/play/3-7/types-and-code-flow/recursive-type-references.ts"},{"path":"/pt/play/3-7/types-and-code-flow/uncalled-function-checks.ts"},{"path":"/pt/play/3-8/breaking-changes/checking-unions-with-index-signatures.ts"},{"path":"/pt/play/3-8/jsdoc-improvements/accessibility-modifiers.js"},{"path":"/pt/play/3-8/syntax-and-messaging/export-modules-from.ts"},{"path":"/pt/play/3-8/syntax-and-messaging/private-class-fields.ts"},{"path":"/pt/play/4-0/new-checks/class-constructor-code-flow.ts"},{"path":"/pt/play/4-0/new-js-features/jsdoc-deprecated.ts"},{"path":"/pt/play/4-0/new-js-features/logical-operators-and-assignment.ts"},{"path":"/pt/play/4-0/new-js-features/nullish-coalescing.ts"},{"path":"/pt/play/4-0/new-ts-features/named-tuples.ts"},{"path":"/pt/play/4-0/new-ts-features/unknown-in-catch.ts"},{"path":"/pt/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/pt/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/pt/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/pt/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/pt/play/javascript/javascript-essentials/functions.ts"},{"path":"/pt/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/pt/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/pt/play/javascript/working-with-classes/classes-101.ts"},{"path":"/pt/play/javascript/working-with-classes/mixins.ts"},{"path":"/pt/play/javascript/working-with-classes/this.ts"},{"path":"/pt/play/playground/language/fixits.ts"},{"path":"/pt/play/playground/tooling/mobile-support.ts"},{"path":"/pt/play/typescript/language-extensions/enums.ts"},{"path":"/pt/play/typescript/meta-types/conditional-types.ts"},{"path":"/pt/play/typescript/primitives/any.ts"},{"path":"/pt/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/pt/play/typescript/primitives/unknown-and-never.ts"},{"path":"/pt/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/pt/play/typescript/type-primitives/nullable-types.ts"},{"path":"/pt/play/typescript/type-primitives/tuples.ts"},{"path":"/pt/play/typescript/language/structural-typing.ts"},{"path":"/pt/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/pt/play/typescript/primitives/literals.ts"},{"path":"/vo/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/vo/play/javascript/javascript-essentials/functions.ts"},{"path":"/vo/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/vo/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-deno.ts"},{"path":"/zh/play/javascript/external-apis/typescript-with-node.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-web.js"},{"path":"/zh/play/javascript/external-apis/typescript-with-webgl.js"},{"path":"/zh/play/javascript/functions-with-javascript/function-chaining.ts"},{"path":"/zh/play/javascript/functions-with-javascript/generic-functions.ts"},{"path":"/zh/play/javascript/functions-with-javascript/typing-functions.ts"},{"path":"/zh/play/javascript/helping-with-javascript/errors.ts"},{"path":"/zh/play/javascript/helping-with-javascript/quick-fixes.ts"},{"path":"/zh/play/javascript/javascript-essentials/code-flow.ts"},{"path":"/zh/play/javascript/javascript-essentials/functions.ts"},{"path":"/zh/play/javascript/javascript-essentials/hello-world.ts"},{"path":"/zh/play/javascript/javascript-essentials/objects-and-arrays.ts"},{"path":"/zh/play/javascript/modern-javascript/async-await.ts"},{"path":"/zh/play/javascript/modern-javascript/immutability.ts"},{"path":"/zh/play/javascript/modern-javascript/import-export.ts"},{"path":"/zh/play/javascript/modern-javascript/jsdoc-support.js"},{"path":"/zh/play/javascript/working-with-classes/classes-101.ts"},{"path":"/zh/play/javascript/working-with-classes/generic-classes.ts"},{"path":"/zh/play/javascript/working-with-classes/mixins.ts"},{"path":"/zh/play/javascript/working-with-classes/this.ts"},{"path":"/zh/play/playground/config/javascript-playgrounds.js"},{"path":"/zh/play/playground/config/new-compiler-defaults.ts"},{"path":"/zh/play/playground/language/automatic-type-acquisition.ts"},{"path":"/zh/play/playground/language/fixits.ts"},{"path":"/zh/play/playground/tooling/mobile-support.ts"},{"path":"/zh/play/playground/tooling/sharable-urls.ts"},{"path":"/zh/play/playground/tooling/typescript-versions.ts"},{"path":"/zh/play/typescript/language/soundness.ts"},{"path":"/zh/play/typescript/language/structural-typing.ts"},{"path":"/zh/play/typescript/language/type-guards.ts"},{"path":"/zh/play/typescript/language/type-widening-and-narrowing.ts"},{"path":"/zh/play/typescript/language-extensions/enums.ts"},{"path":"/zh/play/typescript/language-extensions/nominal-typing.ts"},{"path":"/zh/play/typescript/language-extensions/types-vs-interfaces.ts"},{"path":"/zh/play/typescript/meta-types/conditional-types.ts"},{"path":"/zh/play/typescript/meta-types/discriminate-types.ts"},{"path":"/zh/play/typescript/meta-types/indexed-types.ts"},{"path":"/zh/play/typescript/meta-types/mapped-types.ts"},{"path":"/zh/play/typescript/primitives/any.ts"},{"path":"/zh/play/typescript/primitives/literals.ts"},{"path":"/zh/play/typescript/primitives/union-and-intersection-types.ts"},{"path":"/zh/play/typescript/primitives/unknown-and-never.ts"},{"path":"/zh/play/typescript/type-primitives/built-in-utility-types.ts"},{"path":"/zh/play/typescript/type-primitives/nullable-types.ts"},{"path":"/zh/play/typescript/type-primitives/tuples.ts"},{"path":"/community"},{"path":"/es/community"},{"path":"/id/community"},{"path":"/ja/community"},{"path":"/pt/community"},{"path":"/vo/community"},{"path":"/zh/community"},{"path":"/download"},{"path":"/es/download"},{"path":"/id/download"},{"path":"/ja/download"},{"path":"/pt/download"},{"path":"/vo/download"},{"path":"/zh/download"},{"path":"/empty"},{"path":"/es/empty"},{"path":"/id/empty"},{"path":"/ja/empty"},{"path":"/pt/empty"},{"path":"/vo/empty"},{"path":"/zh/empty"},{"path":"/"},{"path":"/es/"},{"path":"/id/"},{"path":"/ja/"},{"path":"/pt/"},{"path":"/vo/"},{"path":"/zh/"},{"path":"/tools"},{"path":"/es/tools"},{"path":"/id/tools"},{"path":"/ja/tools"},{"path":"/pt/tools"},{"path":"/vo/tools"},{"path":"/zh/tools"},{"path":"/why-create-typescript"},{"path":"/es/why-create-typescript"},{"path":"/id/why-create-typescript"},{"path":"/ja/why-create-typescript"},{"path":"/pt/why-create-typescript"},{"path":"/vo/why-create-typescript"},{"path":"/zh/why-create-typescript"},{"path":"/docs/bootstrap"},{"path":"/es/docs/bootstrap"},{"path":"/id/docs/bootstrap"},{"path":"/ja/docs/bootstrap"},{"path":"/pt/docs/bootstrap"},{"path":"/vo/docs/bootstrap"},{"path":"/zh/docs/bootstrap"},{"path":"/docs/"},{"path":"/es/docs/"},{"path":"/id/docs/"},{"path":"/ja/docs/"},{"path":"/pt/docs/"},{"path":"/vo/docs/"},{"path":"/zh/docs/"},{"path":"/docs/handbook/"},{"path":"/es/docs/handbook/"},{"path":"/id/docs/handbook/"},{"path":"/ja/docs/handbook/"},{"path":"/pt/docs/handbook/"},{"path":"/vo/docs/handbook/"},{"path":"/zh/docs/handbook/"},{"path":"/dt/search"},{"path":"/es/dt/search"},{"path":"/id/dt/search"},{"path":"/ja/dt/search"},{"path":"/pt/dt/search"},{"path":"/vo/dt/search"},{"path":"/zh/dt/search"},{"path":"/branding/"},{"path":"/dev/bug-workbench/"},{"path":"/dev/playground-plugins/"},{"path":"/dev/sandbox/"},{"path":"/dev/twoslash/"},{"path":"/dev/typescript-vfs/"},{"path":"/upcoming/"}]}},"pageContext":{"name":"Typing Functions","title":"Typing Functions","lang":"pt","html":" Você pode chegar bem longe usando a inferência do TypeScript,\n porém existem muitas outras maneiras de prover um modo mais\n rico para documentar a forma das suas funções.\n\n Uma boa primeira opção é observar os parâmetros opcionais,\n que é uma forma de deixar os outros saberem que alguns\n parâmetros podem ser pulados.\n\n<code><pre>\nlet i = 0;\nconst incrementarIndice = (valor?: number) => {\n  i += valor === undefined ? 1 : valor;\n};\n\n// Esta função pode ser invocada das seguintes maneiras:\n\nincrementarIndice();\nincrementarIndice(0);\nincrementarIndice(3);\n\n</pre></code>\n// Você pode tipar parâmetros como funções, que provêm\n inferência de tipos quando escrever estas funções.\n\n<code><pre>\nconst callbackComIndice = (callback: (i: number) => void) => {\n  callback(i);\n};\n\n</pre></code>\n// Embutir interfaces de funções pode dificultar um pouco a leitura\n com todas essas setas. Usar um apelido para o tipo permitirá\n que você nomeie a função passada como parâmetro.\n\n<code><pre>\ntype CallbackComNumero = (i: number) => void;\nconst callbackComIndice2 = (callback: CallbackComNumero) => {\n  callback(i);\n};\n\n// Esta função pode ser invocada da seguinte maneira:\n\ncallbackComIndice2(indice => {\n  console.log(indice);\n});\n\n</pre></code>\n// Se passar o cursor sobre o índice acima, você verá como o TypeScript\n inferiu corretamente que o índice deveria ser um número.\n\n A inferência do TypeScript também pode funcionar quando passamos uma\n função como uma referência de instância. Para demonstrar, usaremos\n uma função que transforma um número em uma string:\n\n<code><pre>\nconst numeroParaString = (n: number) => {\n  return n.toString();\n};\n\n</pre></code>\n// Isso pode ser utilizado em uma função como map em um array\n para converter todos os números em strings. Se passar o cursor\n sobre numerosComoString abaixo, você verá os tipos esperados.\n<code><pre>\nconst numerosComoString = [1, 4, 6, 10].map(i => numeroParaString(i));\n\n</pre></code>\n// Podemos usar uma abreviação para passar a função diretamente\n e termos o mesmo resultado com um código mais focado:\n<code><pre>\nconst numerosComoStringConciso = [1, 4, 6, 10].map(numeroParaString);\n\n</pre></code>\n// Você pode ter funções que aceitam muitos tipos\n mas estar somente interessado em algumas propriedades.\n Esse é um caso útil para assinaturas indexadas em tipos.\n O seguinte tipo declara que nesta função é OK usar qualquer objeto,\n contanto que ele inclua a propriedade nome:\n\n<code><pre>\ninterface QualquerObjetoDeveTerNome {\n  nome: string;\n  [chave: string]: any;\n}\n\nconst apresentaNomeFormatado = (entrada: QualquerObjetoDeveTerNome) => {};\n\napresentaNomeFormatado({ nome: \"joey\" });\napresentaNomeFormatado({ nome: \"joey\", age: 23 });\n\n</pre></code>\n// Se quiser aprender mais sobre assinaturas indexadas\n nós recomendamos:\n\n https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks\n https://basarat.gitbooks.io/typescript/docs/types/index-signatures.html\n\n Você também pode permitir este tipo de comportamento em qualquer lugar\n usando a flag suppressExcessPropertyErrors do arquivo tsconfig -\n porém, você não tem como saber se quem estiver usando sua API\n têm esta configuração desligada.\n\n Funções em JavaScript podem aceitar diferentes conjuntos de parâmetros.\n Existem dois padrões comuns para descrevê-los: union types (união de tipagens)\n para parâmetros/retorno, e function overloads (sobrecarga de funções).\n\n Usar union types nos seus parâmetros faz sentido se existirem\n apenas uma ou duas mudanças e a documentação não precisar ser\n modificada entre essas funções.\n\n<code><pre>\nconst FuncaoBoolOuNumber = (input: boolean | number) => {};\n\nFuncaoBoolOuNumber(true);\nFuncaoBoolOuNumber(23);\n\n</pre></code>\n// Function overloads, por outro lado, oferecem uma sintaxe\n bem mais rica para parâmetros e tipos de retorno.\n\n<code><pre>\ninterface FuncaoBoolOuNumberOuString {\n  /** Recebe um boolean, retorna um boolean */\n  (entrada: boolean): boolean;\n  /** Recebe um número, retorna um número */\n  (entrada: number): number;\n  /** Recebe uma string, retorna um boolean */\n  (entrada: string): boolean;\n}\n\n</pre></code>\n// Se esta for a primeira vez que esteja vendo a expressão declare,\n ela permite que você diga ao TypeScript que algo existe, mesmo\n que não esteja presente em runtime neste arquivo. Isso é útil para\n mapear código com side-effects mas extremamente útil para demos, onde\n implementar algo poderia ser bem custoso.\n\n<code><pre>\ndeclare const funcaoBoolOuNumberOuString: FuncaoBoolOuNumberOuString;\n\nconst valorBool = funcaoBoolOuNumberOuString(true);\nconst valorNumero = funcaoBoolOuNumberOuString(12);\nconst valorBool2 = funcaoBoolOuNumberOuString(\"string\");\n\n</pre></code>\n// Se passar o cursor sobre os valores e funções acima\n você verá a documentação e valores retornados corretos.\n\n Você pode chegar bem longe usando function overloads, porém\n existe uma outra ferramenta para lidar com diferentes tipos\n de valores de entrada e retorno: tipos genéricos.\n\n Tipos genéricos provêm uma forma de você ter tipos como variáveis\n substituíveis em definições de tipo.\n\n example:generic-functions\n example:function-chaining\n","redirectHref":"pt/play/?#example/typing-functions"}}}